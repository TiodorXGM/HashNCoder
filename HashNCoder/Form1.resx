<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADE
        CAAAAk1TRnQBSQFMAgEBAwEAARABAAEQAQABFAEAARQBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEgBgABGRYAAz4BYUAAAz8BYgMiATEEAAMaASQDSgFzA1IBgANSAYADUgGAA1IBgANS
        AYADUgGAA1IBgANSAYADUgGAA1IBgANNAXkDLgFEBAIwAAQCAzEBSgNCAWYDEgEYdAAE/0AABP8DUgGA
        BAADlQHENP8DLgFELAADJAE0A70B3wj/A+AB8QNDAWkEAWwAAz8BYkAABP8DUgGABAADzwHqNP8DQwFq
        JAADGAEhA2kBngPoAfYU/wOVAcUDLAFCaAADkwHDQAAE/wNSAYAIAAT/A1IBgCQABP8sAAOsAdUk/wM4
        AVZkAAT/QAAE/wNSAYAIAAT/A1IBgAQAAysBQAPIAeUDQAFjBAADrwHWA0sBdQMFAQYEAAT/JAADHAEm
        A7MB2Sj/A9YB7AMyAUxgAAOVAcQMAAM/AWIg/wORAcIMAAT/A1IBgAgABP8DUgGABAADygHmA6oB0wMJ
        AQsEAANLAXUE/wNCAWYEAAT/JAADfAGwNP8DIgExXAADPgFhDAADUgGAJP8MAAT/A1IBgAgABP8DUgGA
        BAADeQGtA84B6QMnATgEAAN5Aa0DzgHpAycBOAQABP8DygHmAwIBAxgAAykBPAPrAfc0/wNjAZVcAAT/
        DAADUgGABP8DbQGhAywBQQT/Ay0BQwNsAaAM/wwABP8DUgGACAAE/wNSAYAEAAMJAQsDoAHMAz8BYgQA
        A5sByAMRARYIAAj/AxYBHQQAAxIBGAwAAxcBHwOVAcQ4/wPAAeEDKgE+WAAD4AHxBP8DPgFhA5UBxAj/
        AxYBHhAAAyoBPRj/A0gBcQgAA4UBtwOjAc4DUgGAA1IBgANSAYADUgGAA1IBgANSAYADUgGAA1IBgANp
        AZ4DzAHnA5sByAPKAeYDlwHHA+sB9wMyAUwIAAMwAUgD6wH3BP8DegGuA4ABtAT/A14BkAP5Af0DWgGL
        A0ABYwN3AasD2AHtA0cBbwNIAXEDxQHjBP8D8wH7A14BkGgAA1IBgAT/A8UB4wQAA10BjgOXAcYDDAEP
        A/sB/gj/HAADBQEGA4UBuCD/A9YB7AMwAUgEAANKAXQDgAG0A3gBrAPvAfkDDwEUBAADPAFeCP8DtAHa
        AwsBDgMYASEDIAEtBP8DLAFBBP8D2AHuA6MBzgOFAbcDSwF2A0sBdgj/A4gBu1gAA0gBcQNSAYADIgEx
        Az8BYgOOAb8E/wOjAc4DDAEQAyMBMgNSAX8DBgEIA0ABZAOkAc8E/wNSAYADUgGAA1IBgANSAYADIgEx
        GAADpAHPA8UB5AMnATkIAANAAWQDwAHhA28BowM+AWEIAANSAYEE/wNCAWcEAAM+AWEM/wMrAUADcwGn
        A0ABYwT/AyYBNwNLAXYD7QH4BP8DcwGnAx4BKgOIAbwI/wOQAcFYAAj/Az8BYgOVAcUI/wNpAZ0UAANp
        AZ4U/wNSAYAYAAMYASADrAHVA/EB+ggAA8oB5gj/A50BywgAA/kB/QN3AasDDAEQBAADPgFhDP8DQgFo
        Ax0BKQNtAaEE/wMqAT4I/wOAAbMDLwFGEP8DkAHBWAADwwHiDAADUgGADP8DbAGgBP8DoAHNA24Bogj/
        DAAE/wNSAYAcAANeAZADyAHlBAADlQHEEP8DPgFhBAAD4gHyAxgBIAgAAz4BYQz/A24BogMGAQcDtwHb
        BP8DKgE9AzoBWQNpAZwDswHZAy4BRQMgAS0DlQHFCP8DkAHBaAADUgGAJP8MAAT/A1IBgBgAAxgBIAOs
        AdUD8QH6CAADygHmCP8DnQHLCAAD+QH9A3cBqwMMARAEAAM+AWFA/wOQAcFYAAPAAeEMAAMiATEDUgGA
        A1IBgANSAYADUgGAA1IBgANSAYADUgGAA1IBgAM/AWIMAAT/A1IBgBgAA6QBzwPFAeQDJwE5CAADQAFk
        A8MB4gNvAaQDPwFiCAADUgGBBP8DQgFnBAADPgFhQP8DkAHBWAAE/0AABP8DUgGAGAADHQEoA/MB+wM8
        AVwDhwG6Ax0BKBAAA0oBdAOAAbQDeAGsA/EB+gMPARQEAAM+AWFA/wOQAcFYAAM/AWJAAAT/A1IBgBwA
        A2sBnwP1AfwDoAHMA/EB+gNuAaIEAAMrAT8DmwHIA8oB5gOXAccD6wH3AzMBTQgAAzwBXUD/A4gBu1gA
        A5MBw0AABP8DUgGAHAADCQELAxMBGgQAAygBOwPvAfkEAANOAXoE/wMWAR0EAAMSARgMAAMNAREDUQF+
        A68B1gO0AdoD7QH4JP8DygHmA6QBzwN7Aa8DGgEkWAADwwHiQAADwwHiA0gBcSgAAwYBBwPkAfMI/wPM
        AecDAgEDIAADAgEDAxABFQMhAS8DPAFeA2sBnwPOAekD7QH4A4gBvANHAW8DKgE+AxQBGwMGAQj/AKEA
        AUIBTQE+BwABPgMAASgDAAFQAwABFAMAAQEBAAEBBQAB8BcAA/8BAAG/Af8ByAEAAQ8B/wEPAfAEAAG/
        Af8ByAEAAQ8B/gEDAfAEAAG/Af8ByAEAAQ8B+AEBAfAEAAG/Af8BzAH/Ab8B+AEAAfAEAAG/Af8BzAGI
        Ab8B4AEAAXAEAAG4AQEBzAGIAb8B4AEAATAEAAG4AQEBzAGIAY8BwAEAATAEAAG4AQEBzAGJAYsBgAEA
        ARAEAAGAAfABDAEAAQEBgAEAARAEAAH4AYEB/AEAASABgAEAARAEAAGAAQABDwHGARgBgAEAARAEAAGA
        AfgBDwHGARgBgAEAARAEAAG4AQEBzwHkAQkBgAEAARAEAAH4AQEBzwHGARgBgAEAARAEAAG4AQEBzwHG
        ARgBgAEAARAEAAG/Af8BzwHBAeABgAEAARAEAAG/Af8BzwHgAYEBgAEAARAEAAG/Af8BzwHkAYsBgAEA
        ARAEAAG/Af8BzwH8AQ8B8AEAAfAEAAf/AfAEAAs=
</value>
  </data>
</root>