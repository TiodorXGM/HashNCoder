<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADC
        CAAAAk1TRnQBSQFMAgEBAwEAAQgBAAEIAQABFAEAARQBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEgBgABGRYAAzoBYUAAAzsBYgMiATEEAAMaASQDQgFzA0cBgANHAYADRwGAA0cBgANH
        AYADRwGAA0cBgANHAYADRwGAA0cBgANEAXkDLQFEBAIwAAQCAzABSgM8AWYDEgEYdAAE/0AABP8DRwGA
        BAADZwHENP8DLQFELAADJAE0A4gB3wj/A7wB8QM+AWkEAWwAAzsBYkAABP8DRwGABAADogHqNP8DPgFq
        JAADGAEhA1EBngPNAfYU/wNoAcUDKwFCaAADZwHDQAAE/wNHAYAIAAT/A0cBgCQABP8sAAN5AdUk/wM1
        AVZkAAT/QAAE/wNHAYAIAAT/A0cBgAQAAyoBQAOZAeUDOwFjBAADewHWA0MBdQMFAQYEAAT/JAADGwEm
        A34B2Sj/A6oB7AMxAUxgAANnAcQMAAM7AWIg/wNlAcIMAAT/A0cBgAgABP8DRwGABAADmgHmA3cB0wMJ
        AQsEAANDAXUE/wM8AWYEAAT/JAADWgGwNP8DIgExXAADOgFhDAADRwGAJP8MAAT/A0cBgAgABP8DRwGA
        BAADWAGtA6AB6QMmATgEAANYAa0DoAHpAyYBOAQABP8DmgHmAwIBAxgAAygBPAPVAfc0/wNPAZVcAAT/
        DAADRwGABP8DVAGhAysBQQT/AywBQwNTAaAM/wwABP8DRwGACAAE/wNHAYAEAAMJAQsDbwHMAzsBYgQA
        A20ByAMRARYIAAj/AxYBHQQAAxIBGAwAAxcBHwNnAcQ4/wOPAeEDKQE+WAADvAHxBP8DOgFhA2cBxAj/
        AxYBHhAAAykBPRj/A0EBcQgAA18BtwNxAc4DRwGAA0cBgANHAYADRwGAA0cBgANHAYADRwGAA0cBgANR
        AZ4DnQHnA20ByAOaAeYDaQHHA9UB9wMxAUwIAAMuAUgD1QH3BP8DWQGuA1wBtAT/A0wBkAPwAf0DSwGL
        AzsBYwNZAasDsQHtA0ABbwNBAXEDkwHjBP8D4QH7A0wBkGgAA0cBgAT/A5MB4wQAA0wBjgNpAcYDDAEP
        A/UB/gj/HAADBQEGA18BuCD/A6oB7AMuAUgEAANCAXQDXAG0A1gBrAPdAfkDDwEUBAADOQFeCP8DggHa
        AwsBDgMYASEDIAEtBP8DKwFBBP8DsAHuA3EBzgNfAbcDQwF2A0MBdgj/A2EBu1gAA0EBcQNHAYADIgEx
        AzsBYgNjAb8E/wNxAc4DDAEQAyMBMgNGAX8DBgEIAzwBZANyAc8E/wNHAYADRwGAA0cBgANHAYADIgEx
        GAADcgHPA5IB5AMnATkIAAM8AWQDjwHhA1QBowM6AWEIAANHAYEE/wM9AWcEAAM6AWEM/wMqAUADVgGn
        AzsBYwT/AyUBNwNDAXYD2gH4BP8DVgGnAx4BKgNfAbwI/wNlAcFYAAj/AzsBYgNoAcUI/wNSAZ0UAANR
        AZ4U/wNHAYAYAAMYASADeQHVA98B+ggAA5oB5gj/A24BywgAA/AB/QNZAasDDAEQBAADOgFhDP8DPQFo
        Ax0BKQNUAaEE/wMpAT4I/wNbAbMDLgFGEP8DZQHBWAADkAHiDAADRwGADP8DUwGgBP8DbgHNA1QBogj/
        DAAE/wNHAYAcAANMAZADmQHlBAADZwHEEP8DOgFhBAADwQHyAxgBIAgAAzoBYQz/A1QBogMGAQcDgwHb
        BP8DKQE9AzYBWQNRAZwDfgHZAy0BRQMgAS0DaAHFCP8DZQHBaAADRwGAJP8MAAT/A0cBgBgAAxgBIAN5
        AdUD3wH6CAADmgHmCP8DbgHLCAAD8AH9A1kBqwMMARAEAAM6AWFA/wNlAcFYAAOPAeEMAAMiATEDRwGA
        A0cBgANHAYADRwGAA0cBgANHAYADRwGAA0cBgAM7AWIMAAT/A0cBgBgAA3IBzwOSAeQDJwE5CAADPAFk
        A5AB4gNUAaQDOwFiCAADRwGBBP8DPQFnBAADOgFhQP8DZQHBWAAE/0AABP8DRwGAGAADHQEoA+EB+wM4
        AVwDYAG6Ax0BKBAAA0IBdANcAbQDWAGsA98B+gMPARQEAAM6AWFA/wNlAcFYAAM7AWJAAAT/A0cBgBwA
        A1IBnwPmAfwDbwHMA98B+gNUAaIEAAMqAT8DbQHIA5oB5gNpAccD1QH3AzEBTQgAAzkBXUD/A2EBu1gA
        A2cBw0AABP8DRwGAHAADCQELAxMBGgQAAygBOwPdAfkEAANEAXoE/wMWAR0EAAMSARgMAAMNAREDRgF+
        A3sB1gOCBNoB+CT/A5oB5gNyAc8DWgGvAxoBJFgAA5AB4kAAA5AB4gNBAXEoAAMGAQcDwgHzCP8DnQHn
        AwIBAyAAAwIBAwMQARUDIQEvAzkBXgNSAZ8DoAHpA9oB+ANfAbwDQAFvAykBPgMUARsDBgEI/wChAAFC
        AU0BPgcAAT4DAAEoAwABUAMAARQDAAEBAQABAQUAAfAXAAP/AQABvwH/AcgBAAEPAf8BDwHwBAABvwH/
        AcgBAAEPAf4BAwHwBAABvwH/AcgBAAEPAfgBAQHwBAABvwH/AcwB/wG/AfgBAAHwBAABvwH/AcwBiAG/
        AeABAAFwBAABuAEBAcwBiAG/AeABAAEwBAABuAEBAcwBiAGPAcABAAEwBAABuAEBAcwBiQGLAYABAAEQ
        BAABgAHwAQwBAAEBAYABAAEQBAAB+AGBAfwBAAEgAYABAAEQBAABgAEAAQ8BxgEYAYABAAEQBAABgAH4
        AQ8BxgEYAYABAAEQBAABuAEBAc8B5AEJAYABAAEQBAAB+AEBAc8BxgEYAYABAAEQBAABuAEBAc8BxgEY
        AYABAAEQBAABvwH/Ac8BwQHgAYABAAEQBAABvwH/Ac8B4AGBAYABAAEQBAABvwH/Ac8B5AGLAYABAAEQ
        BAABvwH/Ac8B/AEPAfABAAHwBAAH/wHwBAAL
</value>
  </data>
</root>